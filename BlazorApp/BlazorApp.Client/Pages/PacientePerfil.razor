@page "/paciente/perfil"
@using API.Clients
@using DTOs
@using Shared
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="d-flex align-items-center mb-4">
                <button type="button" class="btn btn-outline-secondary me-3" @onclick="Volver">← Volver</button>
                <h2 class="mb-0">Mi Perfil</h2>
            </div>

            @if (cargando)
            {
                <div class="alert alert-info">
                    <span class="spinner-border spinner-border-sm me-2"></span>
                    Cargando perfil...
                </div>
            }
            else if (errorMessage != null)
            {
                <div class="alert alert-danger alert-dismissible fade show">
                    <strong>Error:</strong> @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                </div>
            }
            else if (pacienteDTO != null)
            {
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Información Personal</h5>
                    </div>
                    <div class="card-body">
                        @if (!editando)
                        {
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <p class="mb-1"><strong>DNI:</strong></p>
                                    <p class="text-muted">@pacienteDTO.DNI</p>
                                </div>
                                <div class="col-md-6">
                                    <p class="mb-1"><strong>Sexo:</strong></p>
                                    <p class="text-muted">@pacienteDTO.Sexo</p>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <p class="mb-1"><strong>Fecha de Nacimiento:</strong></p>
                                    <p class="text-muted">@pacienteDTO.FechaNacimiento.ToString("dd/MM/yyyy")</p>
                                </div>
                                <div class="col-md-6">
                                    <p class="mb-1"><strong>Teléfono:</strong></p>
                                    <p class="text-muted">@pacienteDTO.Telefono</p>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <p class="mb-1"><strong>Plan Obra Social:</strong></p>
                                    <p class="text-muted">
                                        <strong>@planObraSocialInfo</strong>
                                        @if (!string.IsNullOrEmpty(nombreObra))
                                        {
                                            <span> de la obra social <strong>@nombreObra</strong></span>
                                        }
                                        else
                                        {

                                            <span>No tienes Obra Social</span>
                                        }
                                    </p>
                                    <small class="text-muted">
                                        <a href="/paciente/cambiar-plan" class="link-primary">Cambiar Plan</a>
                                    </small>
                                </div>
                            </div>
                            <hr />
                            <button type="button" class="btn btn-primary" @onclick="ActivarEdicion">
                                <i class="bi bi-pencil"></i> Editar Perfil
                            </button>
                        }
                        else
                        {
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="dni" class="form-label"><strong>DNI:</strong></label>
                                    <input type="text" class="form-control" id="dni" @bind="pacienteDTO.DNI" />
                                </div>
                                <div class="col-md-6">
                                    <label for="sexo" class="form-label"><strong>Sexo:</strong></label>
                                    <select class="form-select" id="sexo" @bind="pacienteDTO.Sexo">
                                        <option value="">Seleccionar...</option>
                                        <option value="Masculino">Masculino</option>
                                        <option value="Femenino">Femenino</option>
                                        <option value="Otro">Otro</option>
                                    </select>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="fechaNacimiento" class="form-label"><strong>Fecha de Nacimiento:</strong></label>
                                    <input type="date" class="form-control" id="fechaNacimiento" value="@pacienteDTO.FechaNacimiento.ToString("yyyy-MM-dd")" @oninput="OnFechaNacimientoChanged" />
                                </div>
                                <div class="col-md-6">
                                    <label for="telefono" class="form-label"><strong>Teléfono:</strong></label>
                                    <input type="tel" class="form-control" id="telefono" @bind="pacienteDTO.Telefono" />
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="planOS" class="form-label"><strong>Plan Obra Social:</strong></label>
                                    <input type="text" class="form-control" id="planOS" value="@planObraSocialInfo" disabled />
                                    <small class="text-muted">No se puede modificar desde aquí</small>
                                </div>
                            </div>
                            <hr />
                            <button type="button" class="btn btn-success" @onclick="GuardarCambios" disabled="@guardando">
                                @if (guardando)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Guardar Cambios
                            </button>
                            <button type="button" class="btn btn-outline-secondary ms-2" @onclick="CancelarEdicion" disabled="@guardando">Cancelar</button>
                        }
                    </div>
                </div>

                @if (mensajeExito != null)
                {
                    <div class="alert alert-success alert-dismissible fade show mt-3">
                        <strong>Éxito:</strong> @mensajeExito
                        <button type="button" class="btn-close" @onclick="() => mensajeExito = null"></button>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private PacienteDTO pacienteDTO;
    private PacienteDTO pacienteOriginal;
    private string planObraSocialInfo = "";
    private string nombreObra = "";
    private string fechaNacimientoString = "";
    private bool cargando = true;
    private bool editando = false;
    private bool guardando = false;
    private string errorMessage;
    private string mensajeExito;

    protected override async Task OnInitializedAsync()
    {
        try { await CargarPerfil(); }
        catch (Exception ex) { errorMessage = "Error al cargar el perfil: " + ex.Message; cargando = false; }
    }

    private async Task CargarPerfil()
    {
        try
        {
            cargando = true;
            int pacienteId = (int)SessionManager.PersonaId;
            pacienteDTO = await PacienteApiClient.GetPlanObraSocialAsync(pacienteId);
            fechaNacimientoString = pacienteDTO.FechaNacimiento.ToString("yyyy-MM-dd");
            GuardarCopiaOriginal();
            await CargarPlanObraSocial();
        }
        catch (Exception ex) { errorMessage = ex.Message; }
        finally { cargando = false; }
    }

    private void GuardarCopiaOriginal() => pacienteOriginal = new PacienteDTO
    {
        PersonaId = pacienteDTO.PersonaId,
        ApellidoNombre = pacienteDTO.ApellidoNombre,
        Mail = pacienteDTO.Mail,
        Contrasenia = pacienteDTO.Contrasenia,
        DNI = pacienteDTO.DNI,
        Sexo = pacienteDTO.Sexo,
        FechaNacimiento = pacienteDTO.FechaNacimiento,
        Telefono = pacienteDTO.Telefono,
        PlanObraSocialId = pacienteDTO.PlanObraSocialId
    };

    private async Task CargarPlanObraSocial()
    {
        try
        {
            int pacienteId = (int)SessionManager.PersonaId;
            var pacienteConPlan = await PacienteApiClient.GetPlanObraSocialAsync(pacienteId);
            var planObraSocial = await PlanApiClient.GetAsync(pacienteConPlan.PlanObraSocialId);
            var obraSocial = await ObraSocialApiClient.GetAsync(planObraSocial.ObraSocialId);
            nombreObra = obraSocial.NombreObraSocial;
            planObraSocialInfo = planObraSocial.NombrePlan;
        }
        catch (Exception ex) { planObraSocialInfo = "Error al cargar información de la obra social"; nombreObra = ""; }
    }

    private void ActivarEdicion() { editando = true; errorMessage = null; }

    private async Task GuardarCambios()
    {
        if (string.IsNullOrWhiteSpace(pacienteDTO.DNI)) { errorMessage = "El DNI no puede estar vacío."; return; }
        if (string.IsNullOrWhiteSpace(pacienteDTO.Sexo)) { errorMessage = "Debe seleccionar un sexo."; return; }
        if (string.IsNullOrWhiteSpace(pacienteDTO.Telefono)) { errorMessage = "El teléfono no puede estar vacío."; return; }

        try
        {
            if (!DateOnly.TryParse(fechaNacimientoString, out DateOnly fechaParsed))
            {
                errorMessage = "Fecha de nacimiento inválida.";
                return;
            }
            pacienteDTO.FechaNacimiento = fechaParsed;
            guardando = true;
            await PacienteApiClient.UpdateAsync(pacienteDTO);
            mensajeExito = "Perfil actualizado correctamente.";
            editando = false;
            GuardarCopiaOriginal();
        }
        catch (Exception ex) { errorMessage = "Error al guardar cambios: " + ex.Message; }
        finally { guardando = false; }
    }

    private void CancelarEdicion()
    {
        pacienteDTO = new PacienteDTO
        {
            PersonaId = pacienteOriginal.PersonaId,
            ApellidoNombre = pacienteOriginal.ApellidoNombre,
            Mail = pacienteOriginal.Mail,
            Contrasenia = pacienteOriginal.Contrasenia,
            DNI = pacienteOriginal.DNI,
            Sexo = pacienteOriginal.Sexo,
            FechaNacimiento = pacienteOriginal.FechaNacimiento,
            Telefono = pacienteOriginal.Telefono,
            PlanObraSocialId = pacienteOriginal.PlanObraSocialId
        };
        fechaNacimientoString = pacienteDTO.FechaNacimiento.ToString("yyyy-MM-dd");
        editando = false;
        errorMessage = null;
    }

    private void OnFechaNacimientoChanged(ChangeEventArgs e)
    {
        if (DateOnly.TryParse(e.Value?.ToString(), out var fecha))
        {
            pacienteDTO.FechaNacimiento = fecha;
            fechaNacimientoString = fecha.ToString("yyyy-MM-dd");
        }
        else { fechaNacimientoString = ""; }
    }

    private void Volver() => NavigationManager.NavigateTo("/paciente/home");
}