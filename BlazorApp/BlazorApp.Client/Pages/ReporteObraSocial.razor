@page "/profesional/reporte"
@using DTOs
@using API.Clients

<PageTitle>Reporte: Pacientes por Obra Social</PageTitle>

<div class="container-fluid py-4">
    <h2 class="mb-4">Reporte: Pacientes por Obra Social</h2>

    @if (!string.IsNullOrEmpty(fechaGeneracion))
    {
        <div class="alert alert-info">
            <strong>Fecha de generación:</strong> @fechaGeneracion
        </div>
    }

    <button class="btn btn-primary mb-4" @onclick="CargarReporte" disabled="@cargando">
        @if (cargando)
        {
            <span class="spinner-border spinner-border-sm me-2"></span>
        }
        Recargar
    </button>

    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <div class="alert alert-danger alert-dismissible">
            <strong>Error:</strong> @mensajeError
            <button type="button" class="btn-close" @onclick="@(() => mensajeError = null)"></button>
        </div>
    }

    @if (cargando)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (reporteActual != null && reporteActual.Datos != null && reporteActual.Datos.Any())
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Visualización</h5>
            </div>
            <div class="card-body">
                @{
                    var max = reporteActual.Datos.Max(d => d.CantidadPacientes);
                    if (max == 0) max = 1;
                }

                @foreach (var item in reporteActual.Datos)
                {
                    var porcentaje = (item.CantidadPacientes * 100.0 / max);
                    <div class="mb-3">
                        <div class="d-flex justify-content-between mb-1">
                            <span>@item.NombreObraSocial</span>
                            <strong>@item.CantidadPacientes</strong>
                        </div>
                        <div class="progress" style="height: 30px;">
                            <div class="progress-bar @(item.CantidadPacientes == 0 ? "bg-danger" : "bg-primary")"
                                 style="width: @porcentaje%">
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h5>Datos Detallados</h5>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Obra Social</th>
                            <th class="text-center">Cantidad de Pacientes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in reporteActual.Datos)
                        {
                            <tr>
                                <td>@item.ObraSocialId</td>
                                <td>@item.NombreObraSocial</td>
                                <td class="text-center">
                                    <span class="badge @(item.CantidadPacientes == 0 ? "bg-danger" : "bg-primary")">
                                        @item.CantidadPacientes
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="2" class="text-end"><strong>TOTAL:</strong></td>
                            <td class="text-center"><strong>@reporteActual.Datos.Sum(d => d.CantidadPacientes)</strong></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    }
</div>

@code {
    private ReportePacientesPorObraSocialDTO? reporteActual;
    private bool cargando = false;
    private string? mensajeError;
    private string? fechaGeneracion;

    protected override async Task OnInitializedAsync()
    {
        await CargarReporte();
    }

    private async Task CargarReporte()
    {
        try
        {
            cargando = true;
            mensajeError = null;
            StateHasChanged();

            reporteActual = await ReportesApiClient.GetReporteObrasSocialesAsync();

            if (reporteActual != null)
            {
                fechaGeneracion = reporteActual.FechaGeneracion.ToString("dd/MM/yyyy HH:mm");
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al cargar el reporte: {ex.Message}";
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }
}