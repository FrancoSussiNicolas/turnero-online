@page "/profesional/perfil"
@using API.Clients
@using DTOs
@using Shared
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="d-flex align-items-center mb-4">
                <button type="button" class="btn btn-outline-secondary me-3" @onclick="Volver">← Volver</button>
                <h2 class="mb-0">Mi Perfil Profesional</h2>
            </div>

            @if (cargando)
            {
                <div class="alert alert-info">
                    <span class="spinner-border spinner-border-sm me-2"></span>
                    Cargando perfil...
                </div>
            }
            else if (errorMessage != null)
            {
                <div class="alert alert-danger alert-dismissible fade show">
                    <strong>Error:</strong> @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                </div>
            }
            else if (profesionalDTO != null)
            {
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Información Personal</h5>
                    </div>
                    <div class="card-body">
                        @if (!editando)
                        {
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <p class="mb-1"><strong>Apellido y Nombre:</strong></p>
                                    <p class="text-muted">@profesionalDTO.ApellidoNombre</p>
                                </div>
                                <div class="col-md-6">
                                    <p class="mb-1"><strong>Correo Electrónico:</strong></p>
                                    <p class="text-muted">@profesionalDTO.Mail</p>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <p class="mb-1"><strong>Matrícula:</strong></p>
                                    <p class="text-muted">@profesionalDTO.Matricula</p>
                                </div>
                                <div class="col-md-6">
                                    <p class="mb-1"><strong>Especialidad:</strong></p>
                                    <p class="text-muted">
                                        <span>@(string.IsNullOrEmpty(especialidadNombre) ? "No asignada" : especialidadNombre)</span>
                                        <a href="/profesional/especialidad" class="ms-2"><small>(Modificar)</small></a>
                                    </p>
                                </div>
                            </div>
                            <hr />
                            <button type="button" class="btn btn-primary" @onclick="ActivarEdicion">
                                <i class="bi bi-pencil"></i> Editar Perfil
                            </button>
                        }
                        else
                        {
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="apellidoNombre" class="form-label"><strong>Apellido y Nombre:</strong></label>
                                    <input type="text" class="form-control" id="apellidoNombre" @bind="profesionalDTO.ApellidoNombre" />
                                </div>
                                <div class="col-md-6">
                                    <label for="email" class="form-label"><strong>Correo Electrónico:</strong></label>
                                    <input type="email" class="form-control" id="email" @bind="profesionalDTO.Mail" />
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="matricula" class="form-label"><strong>Matrícula:</strong></label>
                                    <input type="text" class="form-control" id="matricula" @bind="profesionalDTO.Matricula" />
                                </div>
                                <div class="col-md-6">
                                    <label for="especialidad" class="form-label"><strong>Especialidad:</strong></label>
                                    <input type="text" class="form-control" id="especialidad" value="@especialidadNombre" disabled />
                                    <small class="text-muted">Modificar en la sección de especialidades</small>
                                </div>
                            </div>
                            <hr />
                            <button type="button" class="btn btn-success" @onclick="GuardarCambios" disabled="@guardando">
                                @if (guardando)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Guardar Cambios
                            </button>
                            <button type="button" class="btn btn-outline-secondary ms-2" @onclick="CancelarEdicion" disabled="@guardando">Cancelar</button>
                        }
                    </div>
                </div>

                @if (mensajeExito != null)
                {
                    <div class="alert alert-success alert-dismissible fade show mt-3">
                        <strong>Éxito:</strong> @mensajeExito
                        <button type="button" class="btn-close" @onclick="() => mensajeExito = null"></button>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private ProfesionalDTO profesionalDTO;
    private ProfesionalDTO profesionalOriginal;
    private string especialidadNombre = "";
    private bool cargando = true;
    private bool editando = false;
    private bool guardando = false;
    private string errorMessage;
    private string mensajeExito;
    private int profesionalId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            profesionalId = (int)SessionManager.PersonaId;
            await CargarPerfil();
        }
        catch (Exception ex) { errorMessage = "Error al cargar el perfil: " + ex.Message; cargando = false; }
    }

    private async Task CargarPerfil()
    {
        try
        {
            cargando = true;
            profesionalDTO = await ProfesionalApiClient.GetAsync(profesionalId);

            profesionalOriginal = new ProfesionalDTO
            {
                PersonaId = profesionalDTO.PersonaId,
                EspecialidadId = profesionalDTO.EspecialidadId
            };


            GuardarCopiaOriginal();

            await CargarEspecialidad();
        }
        catch (Exception ex) { errorMessage = ex.Message; }
        finally { cargando = false; }
    }

    private void GuardarCopiaOriginal() => profesionalOriginal = new ProfesionalDTO
    {
        PersonaId = profesionalDTO.PersonaId,
        EspecialidadId = profesionalDTO.EspecialidadId
    };

    private async Task CargarEspecialidad()
    {
        try
        {
            var esp = await EspecialidadApiClient.GetAsync(profesionalDTO.EspecialidadId);
            especialidadNombre = esp.Descripcion;
        }
        catch (Exception ex) { especialidadNombre = "Error al cargar especialidad"; }
    }

    private void ActivarEdicion() { editando = true; errorMessage = null; }

    private async Task GuardarCambios()
    {
        if (string.IsNullOrWhiteSpace(profesionalDTO.ApellidoNombre)) { errorMessage = "El apellido y nombre no pueden estar vacíos."; return; }
        if (string.IsNullOrWhiteSpace(profesionalDTO.Mail)) { errorMessage = "El correo electrónico no puede estar vacío."; return; }
        if (!EsEmailValido(profesionalDTO.Mail)) { errorMessage = "El correo electrónico debe ser válido (ejemplo: usuario@dominio.com)."; return; }

        try
        {
            guardando = true;
            await ProfesionalApiClient.UpdateAsync(profesionalDTO);
            mensajeExito = "Perfil actualizado correctamente.";
            editando = false;

            profesionalOriginal = new ProfesionalDTO
            {
                PersonaId = profesionalDTO.PersonaId,
                EspecialidadId = profesionalDTO.EspecialidadId
            };
        }
        catch (Exception ex)
        {
            errorMessage = "Error al guardar cambios: " + ex.Message;
        }
        finally
        {
            guardando = false;

            GuardarCopiaOriginal();

        }
    }

    private void CancelarEdicion()
    {
        profesionalDTO = new ProfesionalDTO
        {
            PersonaId = profesionalOriginal.PersonaId,
            EspecialidadId = profesionalOriginal.EspecialidadId
        };
        editando = false;
        errorMessage = null;
    }

    private bool EsEmailValido(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch { return false; }
    }

    private void Volver() => NavigationManager.NavigateTo("/profesional/home");
}