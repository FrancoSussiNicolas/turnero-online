@page "/paciente/nuevoTurno"
@using DTOs
@using Shared
@using API.Clients
@inject NavigationManager NavigationManager

<PageTitle>Solicitar Turno</PageTitle>

<div class="nuevo-turno-container container py-5">
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">Solicitar un Nuevo Turno</h3>
        </div>

        <div class="card-body p-4">
            <!-- Pasos -->
            <div class="stepper-wrapper mb-5">
                <div class="stepper-item @(actualPaso >= 1 ? "completado" : "")">
                    <div class="step-counter">1</div>
                    <div class="step-name">Especialidad</div>
                </div>
                <div class="stepper-item @(actualPaso >= 2 ? "completado" : "")">
                    <div class="step-counter">2</div>
                    <div class="step-name">Profesional</div>
                </div>
                <div class="stepper-item @(actualPaso >= 3 ? "completado" : "")">
                    <div class="step-counter">3</div>
                    <div class="step-name">Turno</div>
                </div>
            </div>

            <!-- Paso 1 -->
            @if (actualPaso == 1)
            {
                <h4 class="mb-3">Paso 1: Selecciona una especialidad</h4>

                @if (isLoadingEspecialidades)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary"></div>
                        <p>Cargando especialidades...</p>
                    </div>
                }
                else
                {
                    <select class="form-select form-select-lg"
                            @onchange="HandleEspecialidadChange">
                        <option value="0">-- Elige una especialidad --</option>
                        @foreach (var especialidad in especialidades)
                        {
                            <option value="@especialidad.EspecialidadId">@especialidad.Descripcion</option>
                        }
                    </select>
                }
            }

            <!-- Paso 2 -->
            @if (actualPaso == 2)
            {
                <h4 class="mb-3">Paso 2: Selecciona un profesional</h4>
                <button class="btn btn-outline-secondary btn-sm mb-3" @onclick="() => SiguientePaso(1)">
                    <i class="bi bi-arrow-left"></i> Volver
                </button>

                @if (isLoadingProfesionales)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary"></div>
                        <p>Cargando profesionales...</p>
                    </div>
                }
                else if (profesionales.Any())
                {
                    <div class="list-group">
                        @foreach (var profesional in profesionales)
                        {
                            <button type="button" class="list-group-item list-group-item-action d-flex justify-content-between"
                                    @onclick="() => SelectProfesional(profesional.PersonaId)">
                                <span>@profesional.ApellidoNombre</span>
                                <span class="badge @(profesional.AtiendePorObraSocial ? "bg-success" : "bg-warning text-dark")">
                                    @(profesional.AtiendePorObraSocial ? "Obra Social" : "Particular")
                                </span>
                            </button>
                        }
                    </div>
                }
                else
                {
                    <div class="alert alert-info">No hay profesionales disponibles que cubran esa obra social o particulares.</div>
                }
            }

            <!-- Paso 3 -->
            @if (actualPaso == 3)
            {
                <h4 class="mb-3">Paso 3: Elige un turno disponible</h4>
                <button class="btn btn-outline-secondary btn-sm mb-3" @onclick="() => SiguientePaso(2)">
                    <i class="bi bi-arrow-left"></i> Volver
                </button>

                @if (isLoadingTurnos)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary"></div>
                        <p>Cargando turnos...</p>
                    </div>
                }
                else if (turnosDisponibles.Any())
                {
                    <div class="list-group">
                        @foreach (var turno in turnosDisponibles)
                        {
                            <button type="button" class="list-group-item list-group-item-action"
                                    @onclick="() => AbrirModalConfirmacion(turno)">
                                <strong>@turno.FechaTurno.ToString("dddd, dd 'de' MMMM")</strong> a las
                                <strong>@turno.HoraTurno.ToString("HH:mm")</strong>
                            </button>
                        }
                    </div>
                }
                else
                {
                    <div class="alert alert-info">El profesional no tiene turnos disponibles.</div>
                }
            }
        </div>
    </div>
</div>

<!-- Modal de confirmación -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" aria-hidden="@(!showModal)">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Confirmar turno</h5>
                <button type="button" class="btn-close" @onclick="CerrarModal"></button>
            </div>
            <div class="modal-body">
                @if (turnoSeleccionado != null)
                {
                    <p>¿Deseas confirmar el turno el <strong>@turnoSeleccionado.FechaTurno.ToString("dd/MM/yyyy")</strong> a las <strong>@turnoSeleccionado.HoraTurno.ToString("HH:mm")</strong> hs?</p>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                <button class="btn btn-success" @onclick="ConfirmarTurno">Confirmar</button>
            </div>
        </div>
    </div>
</div>

<style>
    .modal.fade {
        display: none;
    }

    .modal.show.d-block {
        display: block;
    }

    .stepper-wrapper {
        display: flex;
        justify-content: space-between;
        position: relative;
    }

    .stepper-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
        text-align: center;
    }

    .stepper-wrapper::before {
        content: "";
        position: absolute;
        top: 20px;
        left: 0;
        right: 0;
        height: 2px;
        background-color: #ccc;
        z-index: 1;
    }

    .step-counter {
        z-index: 5;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #ccc;
        color: white;
        font-weight: bold;
    }

    .completed .step-counter {
        background-color: #0d6efd;
    }
</style>

@code {
    private int actualPaso = 1;
    private int selectedEspecialidadId;
    private int selectedProfesionalId;

    private bool isLoadingEspecialidades;
    private bool isLoadingProfesionales;
    private bool isLoadingTurnos;

    private bool showModal = false;
    private TurnoDTO? turnoSeleccionado;
    private PacienteDTO paciente;

    private IEnumerable<EspecialidadDTO> especialidades = new List<EspecialidadDTO>();
    private IEnumerable<ProfesionalDTO> profesionales = new List<ProfesionalDTO>();
    private IEnumerable<TurnoDTO> turnosDisponibles = new List<TurnoDTO>();

    protected override async Task OnInitializedAsync()
    {
        await LoadEspecialidades();
    }

    private async Task LoadEspecialidades()
    {
        isLoadingEspecialidades = true;
        especialidades = await EspecialidadApiClient.GetAllAsync();
        isLoadingEspecialidades = false;
    }

    private async Task HandleEspecialidadChange(ChangeEventArgs e)
    {
        selectedEspecialidadId = Convert.ToInt32(e.Value);
        if (selectedEspecialidadId > 0)
        {
            await LoadProfesionales();
            SiguientePaso(2);
        }
    }

    private async Task LoadProfesionales()
    {
        isLoadingProfesionales = true;
        try
        {
            if (SessionManager.PersonaId is null)
            {
                profesionales = new List<ProfesionalDTO>();
                return;
            }

            if (selectedEspecialidadId <= 0)
            {
                profesionales = new List<ProfesionalDTO>();
                return;
            }

            // Obtener paciente
            paciente = await PacienteApiClient.GetAsync((int)SessionManager.PersonaId);

            if (paciente == null)
            {
                profesionales = new List<ProfesionalDTO>();
                return;
            }

            // Llamada al API (controlamos que no devuelva null)
            profesionales = await ProfesionalApiClient.GetProfesionalesByEspecialidadAndObraAsync(
                selectedEspecialidadId, paciente.PlanObraSocialId);


        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error cargando profesionales: {ex}");
            profesionales = new List<ProfesionalDTO>();

        }
        finally
        {
            isLoadingProfesionales = false;
        }
    }

    private async Task SelectProfesional(int profesionalId)
    {
        selectedProfesionalId = profesionalId;
        await LoadTurnosDisponibles();
        SiguientePaso(3);
    }

    private async Task LoadTurnosDisponibles()
    {
        isLoadingTurnos = true;

        turnosDisponibles = await TurnoApiClient.GetDisponiblesAsync(selectedProfesionalId);

        isLoadingTurnos = false;
    }


    private void AbrirModalConfirmacion(TurnoDTO turno)
    {
        turnoSeleccionado = turno;
        showModal = true;
    }

    private void CerrarModal()
    {
        showModal = false;
        turnoSeleccionado = null;
    }

    private async Task ConfirmarTurno()
    {
        int pacienteId = Convert.ToInt32(SessionManager.PersonaId);

        if(turnoSeleccionado is not null)
        {
            await TurnoApiClient.AsignarTurno(turnoSeleccionado.TurnoId, pacienteId);  
        
            await Task.Delay(1500);
            NavigationManager.NavigateTo("/paciente/misTurnos");
        }
    }

    private void SiguientePaso(int paso)
    {
        actualPaso = paso;
    }
}
